# Define the CI/CD Workflow for Java code
name: Java CI with Maven

# Trigger the workflow on pushes to the specified branch
on:
  push:
    branches:
      - feature

env:
  PROJECT_ID: 'cicddemo-451910' # update to your Google Cloud project ID
  REGION: 'us-central1' # update to your region
  REPOSITORY: 'my-first-repo'
  ZONE: 'us-central1-a'

# Define permissions required for the OIDC connection
permissions:
  id-token: write                    # This is required for requesting the JWT
  contents: read                     # This permission allows reading the content of files in the repository

# The jobs to be executed in the workflow
jobs:
  # CI Job
  ci:
    runs-on: ubuntu-latest  # self-hosted  
    # Define the steps to be executed in the job
    steps:
    - name: Set short git commit SHA
      id: commit
      uses: prompt/actions-commit-hash@v2
    
    # Check out repository's code into workflow's workspace
    - name: Checkout code
      uses: actions/checkout@v4

    # Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
       distribution: 'temurin'
       java-version: '17'

    # Run unit tests using maven goal
    - name: Run unit test
      run: mvn test

    # Generate code-coverage report using jacoco
    - name : Get code-coverage report
      run: mvn jacoco:report
      
    # Upload code-coverage report as an artifact   
    - name: Code Coverage Report
      uses: actions/upload-artifact@v4
      with:
       name: jacoco-report
       path: target/site/jacoco/index.html

    # SonarQube Scan using maven command
    - name: SonarQube Scan
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${{ secrets.SONAR_PROJECTKEY }} -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}  -Dsonar.login=${{ secrets.SONAR_TOKEN }}
    
    # Check SonarQube quality gate
    - name: Check SonarQube Quality Gate
      run: |
       status=$(curl -s "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECTKEY }}" -u "${{ secrets.SONAR_TOKEN }}": | jq -r '.projectStatus.status')
       if [[ "$status" != "OK" ]]; then
          echo "SonarQube quality gate check passed." 
       else
          echo "SonarQube quality gate check failed"
          exit 1
       fi

    # Build project and package jar using maven
    - name: Build project and package jar
      run: mvn package -Dmaven.test.skip

    # Authenticate to Google Cloud using OIDC
    - name: Authenticate to Google Cloud using OIDC
      id: auth
      uses: google-github-actions/auth@v2
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    # Authenticate Docker to Artifact Registry
    - name: Authenticate Docker to Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

    # Build and Push Container to Artifact Registry
    - name: Build and Push Container to Artifact Registry
      run: |
        DOCKER_IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ github.sha }}"
        docker build -t $DOCKER_IMAGE .
        
    - name: Run Trivy vulnerability scanner in repo mode
      id: trivyscan
      uses: aquasecurity/trivy-action@master
      with:
         scan-type: 'fs'
         scan-ref: '.'
         trivy-config: trivy.yaml
         format: 'table'
         severity: 'CRITICAL,HIGH,MEDIUM'
         
    # Scan Docker Image using Trivy before pushing
    - name: Scan Docker Image with Trivy
      run: |
        DOCKER_IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ github.sha }}"
        trivy image --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL $DOCKER_IMAGE

    # Push to Artifact Registry if scan is successful
    - name: Push Docker Image to Artifact Registry
      if: success()
      run: |
        DOCKER_IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ github.sha }}"
        docker push $DOCKER_IMAGE

  # CD Job (Deploy to VM)
  deploy:
    runs-on: ubuntu-latest
    needs: ci  # Ensure deployment only happens after the CI job is successful

    steps:
    # Authenticate to Google Cloud using OIDC again in the CD job
    - name: Authenticate to Google Cloud using OIDC (CD)
      id: auth
      uses: google-github-actions/auth@v2
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    # Get the VM's external IP address
    - name: Get VM External IP Address
      id: vm-ip
      run: |
        VM_IP=$(gcloud compute instances describe ${{ secrets.VM_NAME }} \
          --project=${{ env.PROJECT_ID }} \
          --zone=${{ env.ZONE }} \
          --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
        echo "VM_IP=$VM_IP" >> $GITHUB_ENV

    # SSH into the VM and deploy Docker container
    - name: Deploy Docker image to VM
      run: |
        # Pull the Docker image from Artifact Registry and run it on the VM
        gcloud compute ssh root@${{ secrets.VM_IP }} \
          --project=${{ env.PROJECT_ID }} \
          --zone=${{ env.ZONE }} \
          --command "
            docker pull $DOCKER_IMAGE &&
            docker run -d -p 80:80 $DOCKER_IMAGE
          "
